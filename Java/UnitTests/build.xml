<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." name="starkcoder-failfast-unittests" xmlns:jacoco="antlib:org.jacoco.ant">
	
	<import file="build-eclipse-generated.xml"/>
	
	<property name="version.major" value="0"/> 
	<property name="version.minor" value="0"/>
	
	<property name="3rd.dir" value="../3rd" />
	<property name="3rd.cobertura.dir" value="${3rd.dir}/cobertura-2.1.1" />
	<property name="config.dir" value="../Config" />
	<property name="src.dir" value="src" />
	<property name="bin.dir" value="bin" />
	<property name="dist.dir" value="dist" />
	<property name="jar.dir" value="${bin.dir}/jar" />
    <property name="doc.dir" value="${bin.dir}/doc" />
	<property name="checkstyle.dir" value="${bin.dir}/checkstyle" />
	<property name="cobertura.dir" value="${bin.dir}/cobertura" />
	<property name="api.dir" value="${doc.dir}/api" />
	
	<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
	         classpath="${3rd.dir}/checkstyle-6.9/lib/checkstyle-6.9-all.jar"/>
	
	<path id="cobertura.classpath">
	    <fileset dir="${3rd.cobertura.dir}">
	        <include name="cobertura-2.1.1.jar" />
	        <include name="lib/**/*.jar" />
	    </fileset>
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	
    <property name="main-class"	value="starkcoder.failfast.SFailFast" />
	
	<!-- ================================= 
          target: init              
         ================================= -->
    <target name="init" depends="UnitTests.init" description="Initializes settings and filesystem">
		<echo message="ANT_HOME=${env.ANT_HOME}"/>
		<echo message="JAVA_HOME=${env.JAVA_HOME}"/>
		<echo message="source=${source}"/>
		<echo message="target=${target}"/>
		<echo message="debuglevel=${debuglevel}"/>
		<echo message="ant.project.name=${ant.project.name}"/>
<!--		<echo message="version.major=${version.major}"/>
		<echo message="version.minor=${version.minor}"/>
		
		<tstamp>
		    <format property="now.mdd" pattern="MDD" locale="UTC"/>
		</tstamp>
		<tstamp>
		    <format property="now.hmm" pattern="Hmm" locale="UTC"/>
		</tstamp>
						
	    <property name="version" value="${version.major}.${version.minor}.${now.mdd}.${now.hmm}" />
		<echo message="version=${version}"/>
		<echo message="jar=${jar.dir}"/> -->
    </target>

	<!-- ================================= 
          target: clean              
         ================================= -->
    <target name="clean" depends="init,UnitTests.clean" description="Removes temporary directories and files">
    </target>

	<!-- ================================= 
          target: cleanall              
         ================================= -->
    <target name="cleanall" depends="init,UnitTests.cleanall" description="Removes temporary directories and files">
    	<!-- <delete dir="${dist.dir}"/>  -->
    </target>

	<!-- ================================= 
          target: build              
         ================================= -->
    <target name="build" depends="init,UnitTests.build,checkstyle" description="Builds the code">
    </target>

	<!-- ================================= 
          target: checkstyle              
         ================================= -->
    <target name="checkstyle" depends="init" description="Runs checkstyle against the code">
        
    	<mkdir dir="${checkstyle.dir}"/>

    	<checkstyle config="${config.dir}/Checkstyle/checkstyle_googlebased_changed.xml">
    	  <fileset dir="${src.dir}" includes="**/*.java"/>
    	  <formatter type="plain"/>
    	  <!-- <formatter type="xml" toFile="${checkstyle.dir}/checkstyle_errors.xml"/> -->
    	</checkstyle>
     </target>	
	
   	<!-- ================================= 
         target: jar              
        ================================= -->
    <target name="jar" depends="build" description="Builds a jar file">
       	
            <mkdir dir="${jar.dir}"/>
    		<jar destfile="${jar.dir}/${ant.project.name}-${version.major}.${version.minor}.jar">
                <manifest>
                    <attribute name="Main-Class" value="${main-class}"/>
                </manifest>
               	<fileset dir="${bin.dir}"
             		includes="**/*.class"
             		excludes="jar,doc"
    			/>
            </jar>
    </target>
    
   	<!-- ================================= 
         target: jar-src              
        ================================= -->
    <target name="jar-src" depends="build" description="Builds a jar file with source files">
       	
            <mkdir dir="${jar.dir}"/>
    		<jar destfile="${jar.dir}/${ant.project.name}-${version.major}.${version.minor}-src.jar">
                <manifest>
                    <attribute name="Main-Class" value="${main-class}"/>
                </manifest>
               	<fileset dir="${src.dir}"
             		includes="**/*.java"
    			/>
            </jar>
    </target>
    
    
	<!-- ================================= 
          target: jar-javadoc              
         ================================= -->
    <target name="jar-javadoc" depends="build,javadoc" description="Builds a jar file with api files">
       	
            <mkdir dir="${jar.dir}"/>
    		<jar destfile="${jar.dir}/${ant.project.name}-${version.major}.${version.minor}-javadoc.jar">
                <manifest>
                    <attribute name="Main-Class" value="${main-class}"/>
                </manifest>
               	<fileset dir="${api.dir}"
             		includes="**/*.*"
    			/>
            </jar>
    </target>

	<!-- ================================= 
          target: jar-all              
         ================================= -->
    <target name="jar-all" depends="build" description="Builds a jar file with source and class files">
       	
            <mkdir dir="${jar.dir}"/>
    		<jar destfile="${jar.dir}/${ant.project.name}-${version.major}.${version.minor}-all.jar">
                <manifest>
                    <attribute name="Main-Class" value="${main-class}"/>
                </manifest>
               	<fileset dir="${src.dir}"
             		includes="**/*.java"
    			/>
              	<fileset dir="${bin.dir}"
             		includes="**/*.class"
             		excludes="jar"
    			/>
              	<fileset dir="${api.dir}"
             		includes="**/*.*"
    			/>
             </jar>
    </target>
	
	<!-- ================================= 
          target: javadoc              
         ================================= -->
    <target name="javadoc" depends="build" description="Builds a javadoc">
    	
	  <javadoc packagenames="starkcoder.failfast.unit.*"
	           sourcepath="src"
	           excludepackagenames="org.junit*"
	           defaultexcludes="yes"
	           destdir="${doc.dir}/api"
	           author="true"
	           version="true"
	           use="true"
	           windowtitle="FailFast v.${version.major}.${version.minor}">
	    <doctitle><![CDATA[<h1>FailFast v.${version.major}.${version.minor}</h1>]]></doctitle>
	    <bottom><![CDATA[<i>The MIT License (MIT) - Copyright &#169; 2014-2015 Keld Oelykke. All Rights Reserved.</i>]]></bottom>
	    <tag name="todo" scope="all" description="To do:"/>
	    <group title="Test Templates" packages="starkcoder.failfast.templates*"/>
	    <group title="Unit Tests" packages="starkcoder.failfast.unit*"/>
	    <link offline="true" href="http://docs.oracle.com/javase/7/docs/api/" packagelistLoc="C:\tmp"/>
	    <link href="http://docs.oracle.com/javase/7/docs/api/"/>
	  </javadoc>
    	
    </target>
    
	<!-- ================================= 
          target: unitreport              
         ================================= -->
    <target name="unitreport" depends="build, unitcoveragereport, unitcoveragecheck, UnitTests.junitreport" description="Runs tests and builds a unit test report">
    </target>
	
    
	<!-- ================================= 
          target: unitcoverage              
         ================================= -->
    <target name="unitcoverage" depends="build" description="Runs tests and records coverage">
    	
        <mkdir dir="${junit.output.dir}"/>
 
    	<delete file="${cobertura.dir}/cobertura.ser" />
        <mkdir dir="${cobertura.dir}/instrumented"/>

    	<cobertura-instrument todir="${cobertura.dir}/instrumented" datafile="${cobertura.dir}/cobertura.ser">
    	    <ignore regex="org.apache.log4j.*" />
    	    <fileset dir="${FailFast.location}/bin">
    	        <include name="**/*.class" />
    	    	<exclude name="**/I*.class" /> <!-- exclude interfaces -->
    	    	<exclude name="**/N*.class" /> <!-- exclude annotations -->
    	    </fileset>
    	</cobertura-instrument>
   	
    	<junit fork="true" forkmode="once" failureProperty="test.failed">
    	    <!--
    	        Specify the name of the coverage data file to use.
    	        The value specified below is the default.
    	    -->
    	    <sysproperty key="net.sourceforge.cobertura.datafile"
    	        file="${cobertura.dir}/cobertura.ser" />

    	    <!--
    	        Note the classpath order: instrumented classes are before the
    	        original (uninstrumented) classes.  This is important.
    	    -->
    	    <classpath location="${cobertura.dir}/instrumented" />
	        <classpath>
	        	<path refid="UnitTests.classpath"/>
	        </classpath>

    	    <!--
    	        The instrumented classes reference classes used by the
    	        Cobertura runtime, so Cobertura and its dependencies
    	        must be on your classpath.
    	    -->
    	    <classpath refid="cobertura.classpath" />

    	    <formatter type="xml" />
    		
    		<batchtest fork="yes" todir="${junit.output.dir}" unless="testcase">
				<fileset dir="${src.dir}">
					<include name="**/*Test.java"/>
					<exclude name="**/templates/**/*.java"/>
				</fileset>
			</batchtest>

    	</junit>
   	
    </target>
	
	<!-- ================================= 
          target: unitcoveragereport              
         ================================= -->
    <target name="unitcoveragereport" depends="unitcoverage" description="Creates report from unitcoverage">

    	<cobertura-report format="html" datafile="${cobertura.dir}/cobertura.ser" destdir="${cobertura.dir}/report" >
    	    <fileset dir="${FailFast.location}/src">
    	        <include name="**/*.java" />
    	    	<exclude name="**/I*.java" />
    	    	<exclude name="**/N*.java" />
    	    </fileset>
    	</cobertura-report>

    </target>
	
	<!-- ================================= 
          target: unitcoveragecheck              
         ================================= -->
	<target name="unitcoveragecheck" depends="unitcoverage">
		<cobertura-check datafile="${cobertura.dir}/cobertura.ser" linerate="50" branchrate="50" packagelinerate="70" packagebranchrate="50" totallinerate="75" totalbranchrate="75" />
	</target>

	
</project>
